2 Лабораторная
Обычная:
Написать “плохой” Dockerfile, в котором есть не менее трех “bad practices” по написанию докерфайлов
Написать “хороший” Dockerfile, в котором эти плохие практики исправлены
В Readme описать каждую из плохих практик в плохом докерфайле, почему она плохая и как в хорошем она была исправлена, как исправление повлияло на результат
В Readme описать 2 плохих практики по работе с контейнерами. ! Не по написанию докерфайлов, а о том, как даже используя хороший докерфайл можно накосячить именно в работе с контейнерами.


В этой лабе будем создавать хорошие и плохие докер файлы

Плохое:
# Плохой Dockerfile
FROM ubuntu:latest

RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

COPY . /app

WORKDIR /app

RUN pip3 install -r requirements.txt

CMD ["python3", "app.py"]

Почему?
Плохие практики в "плохом" Dockerfile

1. Использование тега latest для образа**
   - Проблема: Применение тега latest делает ваш образ нестабильным. Новые версии базового образа могут вызвать сбои в вашей сборке.
   - Решение: Указывайте конкретную версию образа (например, ubuntu:20.04). Это обеспечит большую стабильность и предсказуемость сборки.

2. Отсутствие разделения команд RUN**
   - Проблема: Объединение нескольких операций в одну команду усложняет поиск ошибок и ведет к увеличению размера конечного образа.
   - Решение: Разделите команды RUN на несколько частей. Это поможет уменьшить количество слоев и улучшит читаемость Dockerfile.

3. Копирование всех файлов без фильтрации
   - Проблема: Использование команды COPY . приводит к копированию всех файлов, включая ненужные, что увеличивает размер образа.
   - Решение: Настроить файл .dockerignore для исключения лишних файлов и папок, таких как тестовые файлы и конфигурации.




Хорошие

Хороший Dockerfile
FROM ubuntu:20.04

RUN apt-get update && \
    apt-get install -y python3 python3-pip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY . /app

WORKDIR /app

RUN pip3 install -r requirements.txt

CMD ["python3", "app.py"]



Исправления и их влияние

Указание конкретной версии образа
Теперь стабильная версия образа используется, что исключает вероятность разрыва совместимости и неожиданных ошибок при сборке.

Разбиение RUN команд
Разделение команд улучшает читаемость Dockerfile и облегчает отладку в случае возникновения ошибок. Это также уменьшает размер промежуточных слоев, что, в свою очередь, ускоряет сборку.

Использование .dockerignore файла
В результате копируются только необходимые файлы, что снижает размер образа и ускоряет его сборку. Это позволяет избежать ненужного использования ресурсов.

Плохие практики работы с контейнерами

Несмотря на использование хорошего Dockerfile, существуют практики, которые могут негативно сказаться на работе с контейнерами:

Запуск контейнера с правами суперпользователя (root)
Плохо: Запуск процессов от имени пользователя root внутри контейнера делает систему уязвимой к атакам.
Решение: Создайте нового пользователя в Dockerfile и переключитесь на него перед выполнением приложения. Это повысит безопасность.

Хранение конфиденциальной информации в образе
Плохо: Установка конфиденциальных данных, таких как пароли и ключи API, непосредственно в образ, делает их доступными для любого, кто сможет получить доступ к образу.
Решение: Используйте механизмы управления секретами (например, Docker Secrets) для безопасного управления конфиденциальной информацией.

